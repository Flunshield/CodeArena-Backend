generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id                 Int                  @id @default(autoincrement())
  firstName          String?
  lastName           String?
  userName           String               @unique
  password           String
  email              String
  emailVerified      Boolean              @default(false)
  createdAt          DateTime             @default(now())
  lastLogin          DateTime?
  languagePreference String?
  status             String               @default("inactive")
  avatar             String?
  localisation       String?
  titlesId           Int?
  titles             Title?               @relation(fields: [titlesId], references: [id])
  titlesWin          Json?
  badgesWin          Json?
  company            String?
  url                String?
  school             String?
  github             String?
  presentation       String?
  nbGames            Int?                 @default(0)
  groupsId           Int                  @default(1)
  groups             groups               @relation(fields: [groupsId], references: [id])
  Histories          histories[]
  userRanking        userRanking[]
  userTournament     userTournament[]
  userMatch          userMatch[]
  userEvent          userEvent[]
  commandeEntreprise commandeEntreprise[]
}

model Title {
  id    Int    @id @default(autoincrement())
  value String
  label String
  users user[]
}

model groups {
  id    Int     @id @default(autoincrement())
  name  String
  roles String?
  users user[]
}

model histories {
  id               Int      @id @default(autoincrement())
  userID           Int
  user             user     @relation(fields: [userID], references: [id])
  modificationType String
  details          String
  modificationDate DateTime
  oldValue         String
  newValue         String
}

model tournaments {
  id             Int              @id @default(autoincrement())
  startDate      DateTime
  endDate        DateTime
  playerMax      Int
  title          String
  description    String
  rewards        String
  matches        matches[]
  userTournament userTournament[]
  puzzles        puzzles[]
}

model rankings {
  id          Int           @id @default(autoincrement())
  startDate   DateTime
  endDate     DateTime
  title       String
  description String
  rewards     String
  matches     matches[]
  userRanking userRanking[]
  maxPoints   Float
  minPoints   Float
  puzzles     puzzles[]
}

model matches {
  id           Int         @id @default(autoincrement())
  date         DateTime
  time         DateTime
  location     String
  status       String
  score        Float
  tournamentID Int
  tournaments  tournaments @relation(fields: [tournamentID], references: [id])
  rankingsID   Int
  rankings     rankings    @relation(fields: [rankingsID], references: [id])
  userMatch    userMatch[]
  eventsID     Int
  events       events      @relation(fields: [eventsID], references: [id])
}

model userRanking {
  id         Int      @id @default(autoincrement())
  userID     Int
  user       user     @relation(fields: [userID], references: [id])
  rankingsID Int
  rankings   rankings @relation(fields: [rankingsID], references: [id])
  points     Float
}

model userTournament {
  id           Int         @id @default(autoincrement())
  userID       Int
  user         user        @relation(fields: [userID], references: [id])
  tournamentID Int
  tournaments  tournaments @relation(fields: [tournamentID], references: [id])
  points       Float
}

model userMatch {
  id      Int     @id @default(autoincrement())
  userID  Int
  user    user    @relation(fields: [userID], references: [id])
  matchID Int
  matches matches @relation(fields: [matchID], references: [id])
}

model events {
  id          Int         @id @default(autoincrement())
  startDate   DateTime
  endDate     DateTime
  playerMax   Int
  title       String
  description String
  rewards     String
  organize    String
  matches     matches[]
  userEvent   userEvent[]
  puzzles     puzzles[]
}

model userEvent {
  id       Int    @id @default(autoincrement())
  userID   Int
  user     user   @relation(fields: [userID], references: [id])
  eventsID Int
  events   events @relation(fields: [eventsID], references: [id])
  points   Float
}

model puzzles {
  id           Int         @id @default(autoincrement())
  rankingsID   Int
  rankings     rankings    @relation(fields: [rankingsID], references: [id])
  tournamentID Int
  tournaments  tournaments @relation(fields: [tournamentID], references: [id])
  eventsID     Int
  events       events      @relation(fields: [eventsID], references: [id])
  tests        Json
  details      String
}

model commandeEntreprise {
  id           Int      @id @default(autoincrement())
  idSession    String   @unique
  objetSession Json
  idPayment    String   @unique
  item         String
  userID       Int
  user         user     @relation(fields: [userID], references: [id])
  dateCommande DateTime @default(now())
  etatCommande String
  nbCreateTest Int      @default(10)
}

model puzzlesEntreprise {
  id      Int    @id @default(autoincrement())
  tests   Json
  details String
}
